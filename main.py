import logging
import html
import database
import rss_processor
import cohere_generator
import blogger_poster
import config
from telegram import (
    Update,
    KeyboardButton,
    ReplyKeyboardMarkup
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)

# рж▓ржЧрж┐ржВ рж╕рзЗржЯржЖржк
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ржорзЗржЗржи ржХрж┐ржмрзЛрж░рзНржб
def get_main_keyboard():
    keyboard = [
        [KeyboardButton("ЁЯУЭ Generate Post")],
        [KeyboardButton("тЮХ Add Feed"), KeyboardButton("ЁЯЫая╕П Help")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# /start ржХржорж╛ржирзНржб
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    welcome_msg = (
        f"ЁЯдЦ <b>рж╕рзНржмрж╛ржЧрждржо {user.first_name}!</b>\n\n"
        "ЁЯЪА ржЖржорж┐ AutoBloggerBot - ржЖржкржирж╛рж░ AI-ржкрж╛ржУржпрж╝рж╛рж░рзНржб ржмрзНрж▓ржЧрж┐ржВ рж╕рж╣ржХрж╛рж░рзА\n\n"
        "ЁЯУМ ржЖржорж┐ ржпрж╛ ржХрж░рждрзЗ ржкрж╛рж░рж┐:\n"
        "тАв RSS ржлрж┐ржб ржерзЗржХрзЗ ржирж┐ржЙржЬ рж╕ржВржЧрзНрж░рж╣\n"
        "тАв Cohere AI ржжрж┐ржпрж╝рзЗ SEO-ржЕржкржЯрж┐ржорж╛ржЗржЬржб ржЖрж░рзНржЯрж┐ржХрзЗрж▓ рждрзИрж░рж┐\n"
        "тАв ржмрзНрж▓ржЧрж╛рж░рзЗ рж╕рзНржмржпрж╝ржВржХрзНрж░рж┐ржпрж╝ржнрж╛ржмрзЗ ржкрзЛрж╕рзНржЯ\n\n"
        "ЁЯСЗ ржирж┐ржЪрзЗрж░ ржмрж╛ржЯржи ржмрзНржпржмрж╣рж╛рж░ рж╢рзБрж░рзБ ржХрж░рзБржи"
    )
    await update.message.reply_text(
        welcome_msg,
        parse_mode='HTML',
        reply_markup=get_main_keyboard()
    )

# рж╣рзЗрж▓рзНржк ржХржорж╛ржирзНржб
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    help_text = (
        "ЁЯЖШ <b>рж╕рж╛рж╣рж╛ржпрзНржп ржХрзЗржирзНржжрзНрж░</b>\n\n"
        "ЁЯУЭ <b>Generate Post</b>\n"
        "- рж░тАНрзНржпрж╛ржирзНржбржо RSS ржирж┐ржЙржЬ ржерзЗржХрзЗ ржЖрж░рзНржЯрж┐ржХрзЗрж▓ рждрзИрж░рж┐ ржХрж░рзЗ ржмрзНрж▓ржЧрж╛рж░рзЗ ржкрзЛрж╕рзНржЯ ржХрж░рзЗ\n\n"
        "тЮХ <b>Add Feed</b>\n"
        "- ржирждрзБржи RSS ржлрж┐ржб ржпрзЛржЧ ржХрж░рзЗ (ржлрж░ржорзНржпрж╛ржЯ: URL ржПржмржВ region)\n\n"
        "тЪЩя╕П <b>ржХржорж╛ржирзНржб рж▓рж┐рж╕рзНржЯ</b>\n"
        "/set_blog [ID] - ржмрзНрж▓ржЧрж╛рж░ ржмрзНрж▓ржЧ ржЖржЗржбрж┐ рж╕рзЗржЯ ржХрж░рзБржи\n"
        "/list_feeds - рж╕рзЗржн ржХрж░рж╛ ржлрж┐ржбржЧрзБрж▓рзЛ ржжрзЗржЦрзБржи\n"
        "/help - ржПржЗ рж╕рж╛рж╣рж╛ржпрзНржп ржорзЗржирзБ\n\n"
        "тД╣я╕П <i>USA/EU ржорж╛рж░рзНржХрзЗржЯрзЗрж░ ржЬржирзНржп ржмрж┐рж╢рзЗрж╖ SEO ржЕржкрзНржЯрж┐ржорж╛ржЗржЬрзЗрж╢ржи</i>"
    )
    await update.message.reply_text(
        help_text,
        parse_mode='HTML',
        reply_markup=get_main_keyboard()
    )

# ржкрзЛрж╕рзНржЯ ржЬрзЗржирж╛рж░рзЗрж╢ржи рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
async def generate_post(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        # Step 1: Get news
        await update.message.reply_text(
            "ЁЯФН рж╕рж░рзНржмрж╢рзЗрж╖ ржирж┐ржЙржЬ ржЦрзБржБржЬржЫрж┐...",
            reply_markup=get_main_keyboard()
        )
        news = rss_processor.get_latest_news()
        
        if not news:
            await update.message.reply_text(
                "тЪая╕П ржХрзЛржи ржирж┐ржЙржЬ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐! ржирждрзБржи RSS ржлрж┐ржб ржпрзЛржЧ ржХрж░рзБржиред",
                reply_markup=get_main_keyboard()
            )
            return
        
        # Step 2: Generate article
        await update.message.reply_text(
            f"ЁЯУ░ <b>ржирж┐ржЙржЬ ржкрзЗрзЯрзЗржЫрж┐:</b>\n\n{html.escape(news['title'])}\n\n"
            f"ЁЯМН Region: {news['region'].upper()}",
            parse_mode='HTML',
            reply_markup=get_main_keyboard()
        )
        await update.message.reply_text(
            "ЁЯдЦ AI ржжрж┐ржпрж╝рзЗ SEO-ржЕржкржЯрж┐ржорж╛ржЗржЬржб ржЖрж░рзНржЯрж┐ржХрзЗрж▓ рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...",
            reply_markup=get_main_keyboard()
        )
        
        article = cohere_generator.generate_seo_article(
            news['title'], 
            news['summary'], 
            news['region']
        )
        
        # Step 3: Post to Blogger
        await update.message.reply_text(
            "тЬЕ ржЖрж░рзНржЯрж┐ржХрзЗрж▓ рждрзИрж░рж┐ рж╣ржпрж╝рзЗржЫрзЗ!\n\n"
            "ЁЯЪА ржмрзНрж▓ржЧрж╛рж░рзЗ ржкрзЛрж╕рзНржЯ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...",
            reply_markup=get_main_keyboard()
        )
        
        result = blogger_poster.create_post(
            news['title'], 
            article, 
            news.get('image')
        )
        
        if result['success']:
            await update.message.reply_text(
                f"ЁЯОЙ <b>рж╕ржлрж▓ржнрж╛ржмрзЗ ржкрзЛрж╕рзНржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!</b>\n\n"
                f"ЁЯУЭ {html.escape(result['title'])}\n"
                f"ЁЯФЧ <a href='{result['url']}'>ржмрзНрж▓ржЧрзЗ ржжрзЗржЦрзБржи</a>",
                parse_mode='HTML',
                reply_markup=get_main_keyboard()
            )
        else:
            await update.message.reply_text(
                f"тЭМ ржмрзНрж▓ржЧрж╛рж░рзЗ ржкрзЛрж╕рзНржЯ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛:\n{result['error']}",
                reply_markup=get_main_keyboard()
            )
            
    except Exception as e:
        logger.error(f"Generate Post Error: {str(e)}")
        await update.message.reply_text(
            f"тЪая╕П рждрзНрж░рзБржЯрж┐: {str(e)}",
            reply_markup=get_main_keyboard()
        )

# ржлрж┐ржб ржпрзЛржЧ ржХрж░рж╛рж░ ржХржорж╛ржирзНржб
async def add_feed_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    args = context.args
    if len(args) < 2:
        await update.message.reply_text(
            "тЭМ ржнрзБрж▓ ржлрж░ржорзНржпрж╛ржЯ!\n\n"
            "рж╕ржарж┐ржХ ржлрж░ржорзНржпрж╛ржЯ: <code>/add_feed [URL] [region]</code>\n\n"
            "Region: <code>usa</code> ржмрж╛ <code>eu</code>",
            parse_mode='HTML',
            reply_markup=get_main_keyboard()
        )
        return
    
    url, region = args[0], args[1].lower()
    if region not in ['usa', 'eu']:
        await update.message.reply_text(
            "тЭМ ржнрзБрж▓ рж░рж┐ржЬржи! рж╢рзБржзрзБржорж╛рждрзНрж░ <code>usa</code> ржмрж╛ <code>eu</code> ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи",
            parse_mode='HTML',
            reply_markup=get_main_keyboard()
        )
        return
    
    if database.add_feed(url, region):
        await update.message.reply_text(
            f"тЬЕ рж╕ржлрж▓ржнрж╛ржмрзЗ {region.upper()} ржлрж┐ржб ржпрзЛржЧ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!",
            reply_markup=get_main_keyboard()
        )
    else:
        await update.message.reply_text(
            "тЪая╕П ржПржЗ ржлрж┐ржбржЯрж┐ ржЗрждрж┐ржоржзрзНржпрзЗ ржбрж╛ржЯрж╛ржмрзЗржЬрзЗ ржЖржЫрзЗ!",
            reply_markup=get_main_keyboard()
        )

# ржмрзНрж▓ржЧ рж╕рзЗржЯ ржХржорж╛ржирзНржб
async def set_blog(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    args = context.args
    if not args:
        await update.message.reply_text(
            "тЭМ ржнрзБрж▓ ржлрж░ржорзНржпрж╛ржЯ!\n\n"
            "рж╕ржарж┐ржХ ржлрж░ржорзНржпрж╛ржЯ: <code>/set_blog [BLOG_ID]</code>\n\n"
            "ржЖржкржирж╛рж░ ржмрзНрж▓ржЧ ржЖржЗржбрж┐ ржкрж╛ржУржпрж╝рж╛рж░ ржЬржирзНржп: https://YOURBLOG.blogspot.com/",
            parse_mode='HTML',
            reply_markup=get_main_keyboard()
        )
        return
    
    blog_id = args[0]
    database.set_blog(blog_id)
    await update.message.reply_text(
        f"тЬЕ ржмрзНрж▓ржЧ ржЖржЗржбрж┐ рж╕рзЗржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ: {blog_id}",
        reply_markup=get_main_keyboard()
    )

# ржлрж┐ржб рж▓рж┐рж╕рзНржЯ ржХржорж╛ржирзНржб
async def list_feeds(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    feeds = database.get_feeds()
    if not feeds:
        await update.message.reply_text(
            "тЪая╕П ржХрзЛржи ржлрж┐ржб ржпрзЛржЧ ржХрж░рж╛ рж╣рзЯржирж┐!",
            reply_markup=get_main_keyboard()
        )
        return
    
    feed_list = "\n".join([f"тАв {url} ({region.upper()})" for url, region in feeds])
    await update.message.reply_text(
        f"ЁЯУЛ рж╕рзЗржн ржХрж░рж╛ ржлрж┐ржб рж▓рж┐рж╕рзНржЯ:\n\n{feed_list}",
        reply_markup=get_main_keyboard()
    )

# ржмрж╛ржЯржи рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
async def handle_post_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await generate_post(update, context)

async def handle_add_feed_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "тЮХ ржирждрзБржи RSS ржлрж┐ржб ржпрзЛржЧ ржХрж░рзБржи:\n\n"
        "ржлрж░ржорзНржпрж╛ржЯ: <code>/add_feed [URL] [region]</code>\n\n"
        "ржЙржжрж╛рж╣рж░ржг:\n<code>/add_feed https://example.com/rss.xml usa</code>\n\n"
        "Region: <code>usa</code> ржмрж╛ <code>eu</code>",
        parse_mode='HTML',
        reply_markup=get_main_keyboard()
    )

async def handle_help_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await help_command(update, context)

def main() -> None:
    # PTB 20.0+ Application ржмрж┐рж▓рзНржбрж╛рж░
    application = Application.builder().token(config.TELEGRAM_TOKEN).build()
    
    # ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("add_feed", add_feed_command))
    application.add_handler(CommandHandler("set_blog", set_blog))
    application.add_handler(CommandHandler("generate_post", generate_post))
    application.add_handler(CommandHandler("list_feeds", list_feeds))
    
    # ржмрж╛ржЯржи рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ (PTB 20.0+ style)
    application.add_handler(MessageHandler(filters.Regex(r'^ЁЯУЭ Generate Post$'), handle_post_button))
    application.add_handler(MessageHandler(filters.Regex(r'^тЮХ Add Feed$'), handle_add_feed_button))
    application.add_handler(MessageHandler(filters.Regex(r'^ЁЯЫая╕П Help$'), handle_help_button))
    
    # ржбрж┐ржлрж▓рзНржЯ ржорзЗрж╕рзЗржЬ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, start))
    
    # ржмржЯ рж╕рзНржЯрж╛рж░рзНржЯ
    application.run_polling()
    logger.info("ЁЯдЦ ржмржЯ рж╕ржЪрж▓... ржкрзНрж░рзЗрж╕ Ctrl+C ржмржирзНржз ржХрж░рж╛рж░ ржЬржирзНржп")

if __name__ == '__main__':
    main()